{"ast":null,"code":"import { PostgrestBuilder } from './types';\n/**\n * Post-filters (transforms)\n */\n\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   */\n  select() {\n    let columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';\n    // Remove whitespaces except when quoted\n    let quoted = false;\n    const cleanedColumns = columns.split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n    return this;\n  }\n  /**\n   * Orders the result with the specified `column`.\n   *\n   * @param column  The column to order on.\n   * @param ascending  If `true`, the result will be in ascending order.\n   * @param nullsFirst  If `true`, `null`s appear first.\n   * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n   */\n\n\n  order(column) {\n    let {\n      ascending = true,\n      nullsFirst = false,\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = typeof foreignTable === 'undefined' ? 'order' : `${foreignTable}.order`;\n    const existingOrder = this.url.searchParams.get(key);\n    this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}.${nullsFirst ? 'nullsfirst' : 'nullslast'}`);\n    return this;\n  }\n  /**\n   * Limits the result with the specified `count`.\n   *\n   * @param count  The maximum no. of rows to limit to.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n\n\n  limit(count) {\n    let {\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(key, `${count}`);\n    return this;\n  }\n  /**\n   * Limits the result to rows within the specified range, inclusive.\n   *\n   * @param from  The starting index from which to limit the result, inclusive.\n   * @param to  The last index to which to limit the result, inclusive.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n\n\n  range(from, to) {\n    let {\n      foreignTable\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(keyOffset, `${from}`); // Range is inclusive, so add 1\n\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n    return this;\n  }\n  /**\n   * Sets the AbortSignal for the fetch request.\n   */\n\n\n  abortSignal(signal) {\n    this.signal = signal;\n    return this;\n  }\n  /**\n   * Retrieves only one row from the result. Result must be one row (e.g. using\n   * `limit`), otherwise this will result in an error.\n   */\n\n\n  single() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    return this;\n  }\n  /**\n   * Retrieves at most one row from the result. Result must be at most one row\n   * (e.g. using `eq` on a UNIQUE column), otherwise this will result in an\n   * error.\n   */\n\n\n  maybeSingle() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n\n    const _this = new PostgrestTransformBuilder(this);\n\n    _this.then = (onfulfilled, onrejected) => this.then(res => {\n      var _a, _b;\n\n      if ((_b = (_a = res.error) === null || _a === void 0 ? void 0 : _a.details) === null || _b === void 0 ? void 0 : _b.includes('Results contain 0 rows')) {\n        return onfulfilled({\n          error: null,\n          data: null,\n          count: res.count,\n          status: 200,\n          statusText: 'OK',\n          body: null\n        });\n      }\n\n      return onfulfilled(res);\n    }, onrejected);\n\n    return _this;\n  }\n  /**\n   * Set the response type to CSV.\n   */\n\n\n  csv() {\n    this.headers['Accept'] = 'text/csv';\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/Users/joshpatel/supa-react/node_modules/@supabase/postgrest-js/src/lib/PostgrestTransformBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostgrestBuilder, PostgrestMaybeSingleResponse, PostgrestSingleResponse } from './types'\n\n/**\n * Post-filters (transforms)\n */\n\nexport default class PostgrestTransformBuilder<T> extends PostgrestBuilder<T> {\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   */\n  select(columns = '*'): this {\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = columns\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    return this\n  }\n\n  /**\n   * Orders the result with the specified `column`.\n   *\n   * @param column  The column to order on.\n   * @param ascending  If `true`, the result will be in ascending order.\n   * @param nullsFirst  If `true`, `null`s appear first.\n   * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n   */\n  order(\n    column: keyof T,\n    {\n      ascending = true,\n      nullsFirst = false,\n      foreignTable,\n    }: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string } = {}\n  ): this {\n    const key = typeof foreignTable === 'undefined' ? 'order' : `${foreignTable}.order`\n    const existingOrder = this.url.searchParams.get(key)\n\n    this.url.searchParams.set(\n      key,\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}.${\n        nullsFirst ? 'nullsfirst' : 'nullslast'\n      }`\n    )\n    return this\n  }\n\n  /**\n   * Limits the result with the specified `count`.\n   *\n   * @param count  The maximum no. of rows to limit to.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n  limit(count: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(key, `${count}`)\n    return this\n  }\n\n  /**\n   * Limits the result to rows within the specified range, inclusive.\n   *\n   * @param from  The starting index from which to limit the result, inclusive.\n   * @param to  The last index to which to limit the result, inclusive.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n  range(from: number, to: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(keyOffset, `${from}`)\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\n    return this\n  }\n\n  /**\n   * Sets the AbortSignal for the fetch request.\n   */\n  abortSignal(signal: AbortSignal): this {\n    this.signal = signal\n    return this\n  }\n\n  /**\n   * Retrieves only one row from the result. Result must be one row (e.g. using\n   * `limit`), otherwise this will result in an error.\n   */\n  single(): PromiseLike<PostgrestSingleResponse<T>> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    return this as PromiseLike<PostgrestSingleResponse<T>>\n  }\n\n  /**\n   * Retrieves at most one row from the result. Result must be at most one row\n   * (e.g. using `eq` on a UNIQUE column), otherwise this will result in an\n   * error.\n   */\n  maybeSingle(): PromiseLike<PostgrestMaybeSingleResponse<T>> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    const _this = new PostgrestTransformBuilder(this)\n    _this.then = ((onfulfilled: any, onrejected: any) =>\n      this.then((res: any): any => {\n        if (res.error?.details?.includes('Results contain 0 rows')) {\n          return onfulfilled({\n            error: null,\n            data: null,\n            count: res.count,\n            status: 200,\n            statusText: 'OK',\n            body: null,\n          })\n        }\n\n        return onfulfilled(res)\n      }, onrejected)) as any\n    return _this as PromiseLike<PostgrestMaybeSingleResponse<T>>\n  }\n\n  /**\n   * Set the response type to CSV.\n   */\n  csv(): PromiseLike<PostgrestSingleResponse<string>> {\n    this.headers['Accept'] = 'text/csv'\n    return this as PromiseLike<PostgrestSingleResponse<string>>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}