{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { get, post, remove } from './fetch';\nimport fetch from 'cross-fetch';\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nconst DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport class StorageFileApi {\n  constructor(url) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    let fetch = arguments.length > 3 ? arguments[3] : undefined;\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = fetch;\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n\n\n  uploadOrUpdate(method, path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n          'x-upsert': String(options.upsert)\n        });\n\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n\n        const _path = this._getFinalPath(path);\n\n        const res = yield fetch(`${this.url}/object/${_path}`, {\n          method,\n          body: body,\n          headers\n        });\n\n        if (res.ok) {\n          // const data = await res.json()\n          // temporary fix till backend is updated to the latest storage-api version\n          return {\n            data: {\n              Key: _path\n            },\n            error: null\n          };\n        } else {\n          const error = yield res.json();\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n\n\n  upload(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n\n\n  update(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Moves an existing file, optionally renaming it at the same time.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n\n\n  move(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/move`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Create signed url to download file without requiring permissions. This URL can be valid for a set number of seconds.\n   *\n   * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   */\n\n\n  createSignedUrl(path, expiresIn) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const _path = this._getFinalPath(path);\n\n        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, {\n          expiresIn\n        }, {\n          headers: this.headers\n        });\n        const signedURL = `${this.url}${data.signedURL}`;\n        data = {\n          signedURL\n        };\n        return {\n          data,\n          error: null,\n          signedURL\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error,\n          signedURL: null\n        };\n      }\n    });\n  }\n  /**\n   * Downloads a file.\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n\n\n  download(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const _path = this._getFinalPath(path);\n\n        const res = yield get(this.fetch, `${this.url}/object/${_path}`, {\n          headers: this.headers,\n          noResolveJson: true\n        });\n        const data = yield res.blob();\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Retrieve URLs for assets in public buckets\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n\n\n  getPublicUrl(path) {\n    try {\n      const _path = this._getFinalPath(path);\n\n      const publicURL = `${this.url}/object/public/${_path}`;\n      const data = {\n        publicURL\n      };\n      return {\n        data,\n        error: null,\n        publicURL\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error,\n        publicURL: null\n      };\n    }\n  }\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to be deletes, including the path and file name. For example [`folder/image.png`].\n   */\n\n\n  remove(paths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, {\n          prefixes: paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   * @param options Search options, including `limit`, `offset`, and `sortBy`.\n   * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n   */\n\n\n  list(path, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n          prefix: path || ''\n        });\n        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n\n  _getFinalPath(path) {\n    return `${this.bucketId}/${path}`;\n  }\n\n}","map":{"version":3,"sources":["/Users/joshpatel/supa-react/node_modules/@supabase/storage-js/src/lib/StorageFileApi.ts"],"names":[],"mappings":"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","sourcesContent":["import { Fetch, FetchParameters, get, post, remove } from './fetch'\nimport { isBrowser } from './helpers'\nimport { FileObject, FileOptions, SearchOptions } from './types'\nimport fetch from 'cross-fetch'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\nexport class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch?: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = fetch\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const _path = this._getFinalPath(path)\n      const res = await fetch(`${this.url}/object/${_path}`, {\n        method,\n        body: body as BodyInit,\n        headers,\n      })\n\n      if (res.ok) {\n        // const data = await res.json()\n        // temporary fix till backend is updated to the latest storage-api version\n        return { data: { Key: _path }, error: null }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async upload(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file, optionally renaming it at the same time.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  async move(\n    fromPath: string,\n    toPath: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Create signed url to download file without requiring permissions. This URL can be valid for a set number of seconds.\n   *\n   * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number\n  ): Promise<{\n    data: { signedURL: string } | null\n    error: Error | null\n    signedURL: string | null\n  }> {\n    try {\n      const _path = this._getFinalPath(path)\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn },\n        { headers: this.headers }\n      )\n      const signedURL = `${this.url}${data.signedURL}`\n      data = { signedURL }\n      return { data, error: null, signedURL }\n    } catch (error) {\n      return { data: null, error, signedURL: null }\n    }\n  }\n\n  /**\n   * Downloads a file.\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  async download(path: string): Promise<{ data: Blob | null; error: Error | null }> {\n    try {\n      const _path = this._getFinalPath(path)\n      const res = await get(this.fetch, `${this.url}/object/${_path}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n      const data = await res.blob()\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Retrieve URLs for assets in public buckets\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  getPublicUrl(\n    path: string\n  ): {\n    data: { publicURL: string } | null\n    error: Error | null\n    publicURL: string | null\n  } {\n    try {\n      const _path = this._getFinalPath(path)\n      const publicURL = `${this.url}/object/public/${_path}`\n      const data = { publicURL }\n      return { data, error: null, publicURL }\n    } catch (error) {\n      return { data: null, error, publicURL: null }\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to be deletes, including the path and file name. For example [`folder/image.png`].\n   */\n  async remove(paths: string[]): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   * @param options Search options, including `limit`, `offset`, and `sortBy`.\n   * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  _getFinalPath(path: string) {\n    return `${this.bucketId}/${path}`\n  }\n}\n"]},"metadata":{},"sourceType":"module"}