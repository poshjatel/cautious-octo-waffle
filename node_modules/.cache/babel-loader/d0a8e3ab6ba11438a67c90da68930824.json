{"ast":null,"code":"// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\nexport default class Serializer {\n  constructor() {\n    this.HEADER_LENGTH = 1;\n  }\n\n  decode(rawPayload, callback) {\n    if (rawPayload.constructor === ArrayBuffer) {\n      return callback(this._binaryDecode(rawPayload));\n    }\n\n    if (typeof rawPayload === 'string') {\n      return callback(JSON.parse(rawPayload));\n    }\n\n    return callback({});\n  }\n\n  _binaryDecode(buffer) {\n    const view = new DataView(buffer);\n    const decoder = new TextDecoder();\n    return this._decodeBroadcast(buffer, view, decoder);\n  }\n\n  _decodeBroadcast(buffer, view, decoder) {\n    const topicSize = view.getUint8(1);\n    const eventSize = view.getUint8(2);\n    let offset = this.HEADER_LENGTH + 2;\n    const topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n    offset = offset + topicSize;\n    const event = decoder.decode(buffer.slice(offset, offset + eventSize));\n    offset = offset + eventSize;\n    const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));\n    return {\n      ref: null,\n      topic: topic,\n      event: event,\n      payload: data\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/joshpatel/supa-react/node_modules/@supabase/realtime-js/src/lib/serializer.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,eAAc,MAAO,UAAP,CAAiB;AAA/B,EAAA,WAAA,GAAA;AACE,SAAA,aAAA,GAAgB,CAAhB;AA4CD;;AA1CC,EAAA,MAAM,CAAC,UAAD,EAAmC,QAAnC,EAAqD;AACzD,QAAI,UAAU,CAAC,WAAX,KAA2B,WAA/B,EAA4C;AAC1C,aAAO,QAAQ,CAAC,KAAK,aAAL,CAAmB,UAAnB,CAAD,CAAf;AACD;;AAED,QAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC;AAClC,aAAO,QAAQ,CAAC,IAAI,CAAC,KAAL,CAAW,UAAX,CAAD,CAAf;AACD;;AAED,WAAO,QAAQ,CAAC,EAAD,CAAf;AACD;;AAEO,EAAA,aAAa,CAAC,MAAD,EAAoB;AACvC,UAAM,IAAI,GAAG,IAAI,QAAJ,CAAa,MAAb,CAAb;AACA,UAAM,OAAO,GAAG,IAAI,WAAJ,EAAhB;AAEA,WAAO,KAAK,gBAAL,CAAsB,MAAtB,EAA8B,IAA9B,EAAoC,OAApC,CAAP;AACD;;AAEO,EAAA,gBAAgB,CACtB,MADsB,EAEtB,IAFsB,EAGtB,OAHsB,EAGF;AAOpB,UAAM,SAAS,GAAG,IAAI,CAAC,QAAL,CAAc,CAAd,CAAlB;AACA,UAAM,SAAS,GAAG,IAAI,CAAC,QAAL,CAAc,CAAd,CAAlB;AACA,QAAI,MAAM,GAAG,KAAK,aAAL,GAAqB,CAAlC;AACA,UAAM,KAAK,GAAG,OAAO,CAAC,MAAR,CAAe,MAAM,CAAC,KAAP,CAAa,MAAb,EAAqB,MAAM,GAAG,SAA9B,CAAf,CAAd;AACA,IAAA,MAAM,GAAG,MAAM,GAAG,SAAlB;AACA,UAAM,KAAK,GAAG,OAAO,CAAC,MAAR,CAAe,MAAM,CAAC,KAAP,CAAa,MAAb,EAAqB,MAAM,GAAG,SAA9B,CAAf,CAAd;AACA,IAAA,MAAM,GAAG,MAAM,GAAG,SAAlB;AACA,UAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CACX,OAAO,CAAC,MAAR,CAAe,MAAM,CAAC,KAAP,CAAa,MAAb,EAAqB,MAAM,CAAC,UAA5B,CAAf,CADW,CAAb;AAIA,WAAO;AAAE,MAAA,GAAG,EAAE,IAAP;AAAa,MAAA,KAAK,EAAE,KAApB;AAA2B,MAAA,KAAK,EAAE,KAAlC;AAAyC,MAAA,OAAO,EAAE;AAAlD,KAAP;AACD;;AA5C4B","sourcesContent":["// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\n\nexport default class Serializer {\n  HEADER_LENGTH = 1\n\n  decode(rawPayload: ArrayBuffer | string, callback: Function) {\n    if (rawPayload.constructor === ArrayBuffer) {\n      return callback(this._binaryDecode(rawPayload))\n    }\n\n    if (typeof rawPayload === 'string') {\n      return callback(JSON.parse(rawPayload))\n    }\n\n    return callback({})\n  }\n\n  private _binaryDecode(buffer: ArrayBuffer) {\n    const view = new DataView(buffer)\n    const decoder = new TextDecoder()\n\n    return this._decodeBroadcast(buffer, view, decoder)\n  }\n\n  private _decodeBroadcast(\n    buffer: ArrayBuffer,\n    view: DataView,\n    decoder: TextDecoder\n  ): {\n    ref: null\n    topic: string\n    event: string\n    payload: object\n  } {\n    const topicSize = view.getUint8(1)\n    const eventSize = view.getUint8(2)\n    let offset = this.HEADER_LENGTH + 2\n    const topic = decoder.decode(buffer.slice(offset, offset + topicSize))\n    offset = offset + topicSize\n    const event = decoder.decode(buffer.slice(offset, offset + eventSize))\n    offset = offset + eventSize\n    const data = JSON.parse(\n      decoder.decode(buffer.slice(offset, buffer.byteLength))\n    )\n\n    return { ref: null, topic: topic, event: event, payload: data }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}