{"ast":null,"code":"import { PostgrestQueryBuilder } from '@supabase/postgrest-js';\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient';\nexport class SupabaseQueryBuilder extends PostgrestQueryBuilder {\n  constructor(url, _ref) {\n    let {\n      headers = {},\n      schema,\n      realtime,\n      table,\n      fetch\n    } = _ref;\n    super(url, {\n      headers,\n      schema,\n      fetch\n    });\n    this._subscription = null;\n    this._realtime = realtime;\n    this._headers = headers;\n    this._schema = schema;\n    this._table = table;\n  }\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n\n\n  on(event, callback) {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect();\n    }\n\n    if (!this._subscription) {\n      this._subscription = new SupabaseRealtimeClient(this._realtime, this._headers, this._schema, this._table);\n    }\n\n    return this._subscription.on(event, callback);\n  }\n\n}","map":{"version":3,"sources":["/Users/joshpatel/supa-react/node_modules/@supabase/supabase-js/src/lib/SupabaseQueryBuilder.ts"],"names":[],"mappings":"AAAA,SAAS,qBAAT,QAAsC,wBAAtC;AACA,SAAS,sBAAT,QAAuC,0BAAvC;AAIA,OAAM,MAAO,oBAAP,SAAuC,qBAAvC,CAA+D;AAOnE,EAAA,WAAA,CACE,GADF,QAcG;AAAA,QAZD;AACE,MAAA,OAAO,GAAG,EADZ;AAEE,MAAA,MAFF;AAGE,MAAA,QAHF;AAIE,MAAA,KAJF;AAKE,MAAA;AALF,KAYC;AAED,UAAM,GAAN,EAAW;AAAE,MAAA,OAAF;AAAW,MAAA,MAAX;AAAmB,MAAA;AAAnB,KAAX;AAtBM,SAAA,aAAA,GAA+C,IAA/C;AAwBN,SAAK,SAAL,GAAiB,QAAjB;AACA,SAAK,QAAL,GAAgB,OAAhB;AACA,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,MAAL,GAAc,KAAd;AACD;AAED;;;;AAIG;;;AACH,EAAA,EAAE,CACA,KADA,EAEA,QAFA,EAEuD;AAEvD,QAAI,CAAC,KAAK,SAAL,CAAe,WAAf,EAAL,EAAmC;AACjC,WAAK,SAAL,CAAe,OAAf;AACD;;AACD,QAAI,CAAC,KAAK,aAAV,EAAyB;AACvB,WAAK,aAAL,GAAqB,IAAI,sBAAJ,CACnB,KAAK,SADc,EAEnB,KAAK,QAFc,EAGnB,KAAK,OAHc,EAInB,KAAK,MAJc,CAArB;AAMD;;AACD,WAAO,KAAK,aAAL,CAAmB,EAAnB,CAAsB,KAAtB,EAA6B,QAA7B,CAAP;AACD;;AApDkE","sourcesContent":["import { PostgrestQueryBuilder } from '@supabase/postgrest-js'\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient'\nimport { RealtimeClient } from '@supabase/realtime-js'\nimport { Fetch, SupabaseEventTypes, SupabaseRealtimePayload } from './types'\n\nexport class SupabaseQueryBuilder<T> extends PostgrestQueryBuilder<T> {\n  private _subscription: SupabaseRealtimeClient | null = null\n  private _realtime: RealtimeClient\n  private _headers: { [key: string]: string }\n  private _schema: string\n  private _table: string\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      realtime,\n      table,\n      fetch,\n    }: {\n      headers?: { [key: string]: string }\n      schema: string\n      realtime: RealtimeClient\n      table: string\n      fetch?: Fetch\n    }\n  ) {\n    super(url, { headers, schema, fetch })\n\n    this._realtime = realtime\n    this._headers = headers\n    this._schema = schema\n    this._table = table\n  }\n\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n  on(\n    event: SupabaseEventTypes,\n    callback: (payload: SupabaseRealtimePayload<T>) => void\n  ): SupabaseRealtimeClient {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect()\n    }\n    if (!this._subscription) {\n      this._subscription = new SupabaseRealtimeClient(\n        this._realtime,\n        this._headers,\n        this._schema,\n        this._table\n      )\n    }\n    return this._subscription.on(event, callback)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}