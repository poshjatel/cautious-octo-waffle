{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport crossFetch from 'cross-fetch';\nexport class PostgrestBuilder {\n  constructor(builder) {\n    this.shouldThrowOnError = false;\n    Object.assign(this, builder);\n    this.fetch = builder.fetch || crossFetch;\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n\n\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n\n  then(onfulfilled, onrejected) {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (typeof this.schema === 'undefined') {// skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema;\n    } else {\n      this.headers['Content-Profile'] = this.schema;\n    }\n\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json';\n    }\n\n    let res = this.fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal\n    }).then(res => __awaiter(this, void 0, void 0, function* () {\n      var _a, _b, _c;\n\n      let error = null;\n      let data = null;\n      let count = null;\n\n      if (res.ok) {\n        const isReturnMinimal = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.split(',').includes('return=minimal');\n\n        if (this.method !== 'HEAD' && !isReturnMinimal) {\n          const text = yield res.text();\n\n          if (!text) {// discard `text`\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = text;\n          } else {\n            data = JSON.parse(text);\n          }\n        }\n\n        const countHeader = (_b = this.headers['Prefer']) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\n        const contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\n\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1]);\n        }\n      } else {\n        const body = yield res.text();\n\n        try {\n          error = JSON.parse(body);\n        } catch (_d) {\n          error = {\n            message: body\n          };\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw error;\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status: res.status,\n        statusText: res.statusText,\n        body: data\n      };\n      return postgrestResponse;\n    }));\n\n    if (!this.shouldThrowOnError) {\n      res = res.catch(fetchError => ({\n        error: {\n          message: `FetchError: ${fetchError.message}`,\n          details: '',\n          hint: '',\n          code: fetchError.code || ''\n        },\n        data: null,\n        body: null,\n        count: null,\n        status: 400,\n        statusText: 'Bad Request'\n      }));\n    }\n\n    return res.then(onfulfilled, onrejected);\n  }\n\n}","map":{"version":3,"sources":["/Users/joshpatel/supa-react/node_modules/@supabase/postgrest-js/src/lib/types.ts"],"names":[],"mappings":"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","sourcesContent":["import crossFetch from 'cross-fetch'\n\nexport type Fetch = typeof fetch\n\n/**\n * Error format\n *\n * {@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}\n */\nexport type PostgrestError = {\n  message: string\n  details: string\n  hint: string\n  code: string\n}\n\n/**\n * Response format\n *\n * {@link https://github.com/supabase/supabase-js/issues/32}\n */\ninterface PostgrestResponseBase {\n  status: number\n  statusText: string\n}\n\ninterface PostgrestResponseSuccess<T> extends PostgrestResponseBase {\n  error: null\n  data: T[]\n  body: T[]\n  count: number | null\n}\ninterface PostgrestResponseFailure extends PostgrestResponseBase {\n  error: PostgrestError\n  data: null\n  // For backward compatibility: body === data\n  body: null\n  count: null\n}\nexport type PostgrestResponse<T> = PostgrestResponseSuccess<T> | PostgrestResponseFailure\n\ninterface PostgrestSingleResponseSuccess<T> extends PostgrestResponseBase {\n  error: null\n  data: T\n  // For backward compatibility: body === data\n  body: T\n}\nexport type PostgrestSingleResponse<T> =\n  | PostgrestSingleResponseSuccess<T>\n  | PostgrestResponseFailure\nexport type PostgrestMaybeSingleResponse<T> = PostgrestSingleResponse<T | null>\n\nexport abstract class PostgrestBuilder<T> implements PromiseLike<PostgrestResponse<T>> {\n  protected method!: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n  protected url!: URL\n  protected headers!: { [key: string]: string }\n  protected schema?: string\n  protected body?: Partial<T> | Partial<T>[]\n  protected shouldThrowOnError = false\n  protected signal?: AbortSignal\n  protected fetch: Fetch\n\n  constructor(builder: PostgrestBuilder<T>) {\n    Object.assign(this, builder)\n    this.fetch = builder.fetch || crossFetch\n  }\n\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(): PostgrestBuilder<T> {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  then<TResult1 = PostgrestResponse<T>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: PostgrestResponse<T>) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (typeof this.schema === 'undefined') {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema\n    } else {\n      this.headers['Content-Profile'] = this.schema\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json'\n    }\n\n    let res = this.fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal,\n    }).then(async (res) => {\n      let error = null\n      let data = null\n      let count = null\n\n      if (res.ok) {\n        const isReturnMinimal = this.headers['Prefer']?.split(',').includes('return=minimal')\n        if (this.method !== 'HEAD' && !isReturnMinimal) {\n          const text = await res.text()\n          if (!text) {\n            // discard `text`\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = text\n          } else {\n            data = JSON.parse(text)\n          }\n        }\n\n        const countHeader = this.headers['Prefer']?.match(/count=(exact|planned|estimated)/)\n        const contentRange = res.headers.get('content-range')?.split('/')\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1])\n        }\n      } else {\n        const body = await res.text()\n\n        try {\n          error = JSON.parse(body)\n        } catch {\n          error = {\n            message: body,\n          }\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw error\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status: res.status,\n        statusText: res.statusText,\n        body: data,\n      }\n\n      return postgrestResponse\n    })\n    if (!this.shouldThrowOnError) {\n      res = res.catch((fetchError) => ({\n        error: {\n          message: `FetchError: ${fetchError.message}`,\n          details: '',\n          hint: '',\n          code: fetchError.code || '',\n        },\n        data: null,\n        body: null,\n        count: null,\n        status: 400,\n        statusText: 'Bad Request',\n      }))\n    }\n\n    return res.then(onfulfilled, onrejected)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}