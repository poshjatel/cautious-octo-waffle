{"ast":null,"code":"/**\n * Serialize data into a cookie header.\n */\nfunction serialize(name, val, options) {\n  const opt = options || {};\n  const enc = encodeURIComponent;\n  /* eslint-disable-next-line no-control-regex */\n\n  const fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  const value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  let str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    const maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid');\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.sameSite) {\n    const sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n\n      case 'none':\n        str += '; SameSite=None';\n        break;\n\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n/**\n * Based on the environment and the request we know if a secure cookie can be set.\n */\n\n\nfunction isSecureEnvironment(req) {\n  if (!req || !req.headers || !req.headers.host) {\n    throw new Error('The \"host\" request header is not available');\n  }\n\n  const host = req.headers.host.indexOf(':') > -1 && req.headers.host.split(':')[0] || req.headers.host;\n\n  if (['localhost', '127.0.0.1'].indexOf(host) > -1 || host.endsWith('.local')) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Serialize a cookie to a string.\n */\n\n\nfunction serializeCookie(cookie, secure) {\n  var _a, _b, _c;\n\n  return serialize(cookie.name, cookie.value, {\n    maxAge: cookie.maxAge,\n    expires: new Date(Date.now() + cookie.maxAge * 1000),\n    httpOnly: true,\n    secure,\n    path: (_a = cookie.path) !== null && _a !== void 0 ? _a : '/',\n    domain: (_b = cookie.domain) !== null && _b !== void 0 ? _b : '',\n    sameSite: (_c = cookie.sameSite) !== null && _c !== void 0 ? _c : 'lax'\n  });\n}\n/**\n * Set one or more cookies.\n */\n\n\nexport function setCookies(req, res, cookies) {\n  const strCookies = cookies.map(c => serializeCookie(c, isSecureEnvironment(req)));\n  const previousCookies = res.getHeader('Set-Cookie');\n\n  if (previousCookies) {\n    if (previousCookies instanceof Array) {\n      Array.prototype.push.apply(strCookies, previousCookies);\n    } else if (typeof previousCookies === 'string') {\n      strCookies.push(previousCookies);\n    }\n  }\n\n  res.setHeader('Set-Cookie', strCookies);\n}\n/**\n * Set one or more cookies.\n */\n\nexport function setCookie(req, res, cookie) {\n  setCookies(req, res, [cookie]);\n}\nexport function deleteCookie(req, res, name) {\n  setCookie(req, res, {\n    name,\n    value: '',\n    maxAge: -1\n  });\n}","map":{"version":3,"sources":["/Users/joshpatel/supa-react/node_modules/@supabase/gotrue-js/src/lib/cookies.ts"],"names":[],"mappings":"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","sourcesContent":["type Cookie = {\n  name: string\n  value: string\n  maxAge: number\n  domain?: string\n  path?: string\n  sameSite?: string\n}\n\n/**\n * Serialize data into a cookie header.\n */\nfunction serialize(\n  name: string,\n  val: string,\n  options: {\n    maxAge: number\n    domain: string\n    path: string\n    expires: Date\n    httpOnly: boolean\n    secure: boolean\n    sameSite: string\n  }\n) {\n  const opt = options || {}\n  const enc = encodeURIComponent\n  /* eslint-disable-next-line no-control-regex */\n  const fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid')\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid')\n  }\n\n  const value = enc(val)\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid')\n  }\n\n  let str = name + '=' + value\n\n  if (null != opt.maxAge) {\n    const maxAge = opt.maxAge - 0\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge)\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid')\n    }\n\n    str += '; Domain=' + opt.domain\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid')\n    }\n\n    str += '; Path=' + opt.path\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid')\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString()\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly'\n  }\n\n  if (opt.secure) {\n    str += '; Secure'\n  }\n\n  if (opt.sameSite) {\n    const sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite\n\n    switch (sameSite) {\n      case 'lax':\n        str += '; SameSite=Lax'\n        break\n      case 'strict':\n        str += '; SameSite=Strict'\n        break\n      case 'none':\n        str += '; SameSite=None'\n        break\n      default:\n        throw new TypeError('option sameSite is invalid')\n    }\n  }\n\n  return str\n}\n\n/**\n * Based on the environment and the request we know if a secure cookie can be set.\n */\nfunction isSecureEnvironment(req: any) {\n  if (!req || !req.headers || !req.headers.host) {\n    throw new Error('The \"host\" request header is not available')\n  }\n\n  const host =\n    (req.headers.host.indexOf(':') > -1 && req.headers.host.split(':')[0]) || req.headers.host\n  if (['localhost', '127.0.0.1'].indexOf(host) > -1 || host.endsWith('.local')) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Serialize a cookie to a string.\n */\nfunction serializeCookie(cookie: Cookie, secure: boolean) {\n  return serialize(cookie.name, cookie.value, {\n    maxAge: cookie.maxAge,\n    expires: new Date(Date.now() + cookie.maxAge * 1000),\n    httpOnly: true,\n    secure,\n    path: cookie.path ?? '/',\n    domain: cookie.domain ?? '',\n    sameSite: cookie.sameSite ?? 'lax',\n  })\n}\n\n/**\n * Set one or more cookies.\n */\nexport function setCookies(req: any, res: any, cookies: Array<Cookie>) {\n  const strCookies = cookies.map((c) => serializeCookie(c, isSecureEnvironment(req)))\n  const previousCookies = res.getHeader('Set-Cookie')\n  if (previousCookies) {\n    if (previousCookies instanceof Array) {\n      Array.prototype.push.apply(strCookies, previousCookies)\n    } else if (typeof previousCookies === 'string') {\n      strCookies.push(previousCookies)\n    }\n  }\n  res.setHeader('Set-Cookie', strCookies)\n}\n\n/**\n * Set one or more cookies.\n */\nexport function setCookie(req: any, res: any, cookie: Cookie) {\n  setCookies(req, res, [cookie])\n}\n\nexport function deleteCookie(req: any, res: any, name: string) {\n  setCookie(req, res, {\n    name,\n    value: '',\n    maxAge: -1,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}