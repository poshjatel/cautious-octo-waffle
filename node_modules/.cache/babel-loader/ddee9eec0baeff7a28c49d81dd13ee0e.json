{"ast":null,"code":"import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder';\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder';\nimport { DEFAULT_HEADERS } from './lib/constants';\nexport default class PostgrestClient {\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  constructor(url) {\n    let {\n      headers = {},\n      schema,\n      fetch\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schema = schema;\n    this.fetch = fetch;\n  }\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n\n\n  auth(token) {\n    this.headers['Authorization'] = `Bearer ${token}`;\n    return this;\n  }\n  /**\n   * Perform a table operation.\n   *\n   * @param table  The table name to operate on.\n   */\n\n\n  from(table) {\n    const url = `${this.url}/${table}`;\n    return new PostgrestQueryBuilder(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch\n    });\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head  When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  rpc(fn, params) {\n    let {\n      head = false,\n      count = null\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const url = `${this.url}/rpc/${fn}`;\n    return new PostgrestRpcBuilder(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch\n    }).rpc(params, {\n      head,\n      count\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/joshpatel/supa-react/node_modules/@supabase/postgrest-js/src/PostgrestClient.ts"],"names":[],"mappings":"AAAA,OAAO,qBAAP,MAAkC,6BAAlC;AACA,OAAO,mBAAP,MAAgC,2BAAhC;AAEA,SAAS,eAAT,QAAgC,iBAAhC;AAGA,eAAc,MAAO,eAAP,CAAsB;AAMlC;;;;;;AAMG;AACH,EAAA,WAAA,CACE,GADF,EAMiF;AAAA,QAJ/E;AACE,MAAA,OAAO,GAAG,EADZ;AAEE,MAAA,MAFF;AAGE,MAAA;AAHF,KAI+E,uEAAF,EAAE;AAE/E,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,OAAL,GAAY,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,eAAR,CAAA,EAA4B,OAA5B,CAAZ;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,KAAL,GAAa,KAAb;AACD;AAED;;;;AAIG;;;AACH,EAAA,IAAI,CAAC,KAAD,EAAc;AAChB,SAAK,OAAL,CAAa,eAAb,IAAgC,UAAU,KAAK,EAA/C;AACA,WAAO,IAAP;AACD;AAED;;;;AAIG;;;AACH,EAAA,IAAI,CAAU,KAAV,EAAuB;AACzB,UAAM,GAAG,GAAG,GAAG,KAAK,GAAG,IAAI,KAAK,EAAhC;AACA,WAAO,IAAI,qBAAJ,CAA6B,GAA7B,EAAkC;AACvC,MAAA,OAAO,EAAE,KAAK,OADyB;AAEvC,MAAA,MAAM,EAAE,KAAK,MAF0B;AAGvC,MAAA,KAAK,EAAE,KAAK;AAH2B,KAAlC,CAAP;AAKD;AAED;;;;;;;AAOG;;;AACH,EAAA,GAAG,CACD,EADC,EAED,MAFC,EASK;AAAA,QANN;AACE,MAAA,IAAI,GAAG,KADT;AAEE,MAAA,KAAK,GAAG;AAFV,KAMM,uEAAF,EAAE;AAEN,UAAM,GAAG,GAAG,GAAG,KAAK,GAAG,QAAQ,EAAE,EAAjC;AACA,WAAO,IAAI,mBAAJ,CAA2B,GAA3B,EAAgC;AACrC,MAAA,OAAO,EAAE,KAAK,OADuB;AAErC,MAAA,MAAM,EAAE,KAAK,MAFwB;AAGrC,MAAA,KAAK,EAAE,KAAK;AAHyB,KAAhC,EAIJ,GAJI,CAIA,MAJA,EAIQ;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,KAJR,CAAP;AAKD;;AA5EiC","sourcesContent":["import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder'\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder'\nimport PostgrestFilterBuilder from './lib/PostgrestFilterBuilder'\nimport { DEFAULT_HEADERS } from './lib/constants'\nimport { Fetch } from './lib/types'\n\nexport default class PostgrestClient {\n  url: string\n  headers: { [key: string]: string }\n  schema?: string\n  fetch?: Fetch\n\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: { headers?: { [key: string]: string }; schema?: string; fetch?: Fetch } = {}\n  ) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.schema = schema\n    this.fetch = fetch\n  }\n\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n  auth(token: string): this {\n    this.headers['Authorization'] = `Bearer ${token}`\n    return this\n  }\n\n  /**\n   * Perform a table operation.\n   *\n   * @param table  The table name to operate on.\n   */\n  from<T = any>(table: string): PostgrestQueryBuilder<T> {\n    const url = `${this.url}/${table}`\n    return new PostgrestQueryBuilder<T>(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head  When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  rpc<T = any>(\n    fn: string,\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    const url = `${this.url}/rpc/${fn}`\n    return new PostgrestRpcBuilder<T>(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n    }).rpc(params, { head, count })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}