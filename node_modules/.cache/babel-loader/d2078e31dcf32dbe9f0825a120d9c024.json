{"ast":null,"code":"import { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestQueryBuilder extends PostgrestBuilder {\n  constructor(url) {\n    let {\n      headers = {},\n      schema,\n      fetch\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super({\n      fetch\n    });\n    this.url = new URL(url);\n    this.headers = Object.assign({}, headers);\n    this.schema = schema;\n  }\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   * @param head  When set to true, select will void data.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  select() {\n    let columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';\n    let {\n      head = false,\n      count = null\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.method = 'GET'; // Remove whitespaces except when quoted\n\n    let quoted = false;\n    const cleanedColumns = columns.split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`;\n    }\n\n    if (head) {\n      this.method = 'HEAD';\n    }\n\n    return new PostgrestFilterBuilder(this);\n  }\n\n  insert(values) {\n    let {\n      upsert = false,\n      onConflict,\n      returning = 'representation',\n      count = null\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.method = 'POST';\n    const prefersHeaders = [`return=${returning}`];\n    if (upsert) prefersHeaders.push('resolution=merge-duplicates');\n    if (upsert && onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n    this.body = values;\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n        this.url.searchParams.set('columns', uniqueColumns.join(','));\n      }\n    }\n\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs an UPSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n   */\n\n\n  upsert(values) {\n    let {\n      onConflict,\n      returning = 'representation',\n      count = null,\n      ignoreDuplicates = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.method = 'POST';\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`, `return=${returning}`];\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n    this.body = values;\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs an UPDATE on the table.\n   *\n   * @param values  The values to update.\n   * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  update(values) {\n    let {\n      returning = 'representation',\n      count = null\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.method = 'PATCH';\n    const prefersHeaders = [`return=${returning}`];\n    this.body = values;\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n  /**\n   * Performs a DELETE on the table.\n   *\n   * @param returning  If `true`, return the deleted row(s) in the response.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  delete() {\n    let {\n      returning = 'representation',\n      count = null\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.method = 'DELETE';\n    const prefersHeaders = [`return=${returning}`];\n\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder(this);\n  }\n\n}","map":{"version":3,"sources":["/Users/joshpatel/supa-react/node_modules/@supabase/postgrest-js/src/lib/PostgrestQueryBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { Fetch, PostgrestBuilder } from './types'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\n\nexport default class PostgrestQueryBuilder<T> extends PostgrestBuilder<T> {\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: { headers?: { [key: string]: string }; schema?: string; fetch?: Fetch } = {}\n  ) {\n    super(({ fetch } as unknown) as PostgrestBuilder<T>)\n    this.url = new URL(url)\n    this.headers = { ...headers }\n    this.schema = schema\n  }\n\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   * @param head  When set to true, select will void data.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  select(\n    columns = '*',\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'GET'\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = columns\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`\n    }\n    if (head) {\n      this.method = 'HEAD'\n    }\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an INSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  insert(\n    values: Partial<T> | Partial<T>[],\n    options?: {\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<T>\n  /**\n   * @deprecated Use `upsert()` instead.\n   */\n  insert(\n    values: Partial<T> | Partial<T>[],\n    options?: {\n      upsert?: boolean\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<T>\n  insert(\n    values: Partial<T> | Partial<T>[],\n    {\n      upsert = false,\n      onConflict,\n      returning = 'representation',\n      count = null,\n    }: {\n      upsert?: boolean\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'POST'\n\n    const prefersHeaders = [`return=${returning}`]\n    if (upsert) prefersHeaders.push('resolution=merge-duplicates')\n\n    if (upsert && onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an UPSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n   */\n  upsert(\n    values: Partial<T> | Partial<T>[],\n    {\n      onConflict,\n      returning = 'representation',\n      count = null,\n      ignoreDuplicates = false,\n    }: {\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n      ignoreDuplicates?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'POST'\n\n    const prefersHeaders = [\n      `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`,\n      `return=${returning}`,\n    ]\n\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an UPDATE on the table.\n   *\n   * @param values  The values to update.\n   * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  update(\n    values: Partial<T>,\n    {\n      returning = 'representation',\n      count = null,\n    }: {\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'PATCH'\n    const prefersHeaders = [`return=${returning}`]\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs a DELETE on the table.\n   *\n   * @param returning  If `true`, return the deleted row(s) in the response.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  delete({\n    returning = 'representation',\n    count = null,\n  }: {\n    returning?: 'minimal' | 'representation'\n    count?: null | 'exact' | 'planned' | 'estimated'\n  } = {}): PostgrestFilterBuilder<T> {\n    this.method = 'DELETE'\n    const prefersHeaders = [`return=${returning}`]\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n    return new PostgrestFilterBuilder(this)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}