{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { get, post, put, remove } from './fetch';\nimport { DEFAULT_HEADERS } from './constants';\nexport class StorageBucketApi {\n  constructor(url) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let fetch = arguments.length > 2 ? arguments[2] : undefined;\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = fetch;\n  }\n  /**\n   * Retrieves the details of all Storage buckets within an existing product.\n   */\n\n\n  listBuckets() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n\n\n  getBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket/${id}`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @returns newly created bucket id\n   */\n\n\n  createBucket(id) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      public: false\n    };\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket`, {\n          id,\n          name: id,\n          public: options.public\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: data.name,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Updates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   */\n\n\n  updateBucket(id, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n          id,\n          name: id,\n          public: options.public\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n\n\n  emptyBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n\n\n  deleteBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/joshpatel/supa-react/node_modules/@supabase/storage-js/src/lib/StorageBucketApi.ts"],"names":[],"mappings":"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","sourcesContent":["import { Fetch, get, post, put, remove } from './fetch'\nimport { Bucket } from './types'\nimport { DEFAULT_HEADERS } from './constants'\n\nexport class StorageBucketApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch?: Fetch\n\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = fetch\n  }\n\n  /**\n   * Retrieves the details of all Storage buckets within an existing product.\n   */\n  async listBuckets(): Promise<{ data: Bucket[] | null; error: Error | null }> {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n  async getBucket(id: string): Promise<{ data: Bucket | null; error: Error | null }> {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @returns newly created bucket id\n   */\n  async createBucket(\n    id: string,\n    options: { public: boolean } = { public: false }\n  ): Promise<{ data: string | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket`,\n        { id, name: id, public: options.public },\n        { headers: this.headers }\n      )\n      return { data: data.name, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Updates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   */\n  async updateBucket(\n    id: string,\n    options: { public: boolean }\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await put(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        { id, name: id, public: options.public },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n  async emptyBucket(\n    id: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket/${id}/empty`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n  async deleteBucket(\n    id: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}