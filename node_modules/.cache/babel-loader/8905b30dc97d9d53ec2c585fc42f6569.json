{"ast":null,"code":"import { DEFAULT_TIMEOUT } from '../lib/constants';\nexport default class Push {\n  /**\n   * Initializes the Push\n   *\n   * @param channel The Channel\n   * @param event The event, for example `\"phx_join\"`\n   * @param payload The payload, for example `{user_id: 123}`\n   * @param timeout The push timeout in milliseconds\n   */\n  constructor(channel, event) {\n    let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_TIMEOUT;\n    this.channel = channel;\n    this.event = event;\n    this.payload = payload;\n    this.timeout = timeout;\n    this.sent = false;\n    this.timeoutTimer = undefined;\n    this.ref = '';\n    this.receivedResp = null;\n    this.recHooks = [];\n    this.refEvent = null;\n  }\n\n  resend(timeout) {\n    this.timeout = timeout;\n\n    this._cancelRefEvent();\n\n    this.ref = '';\n    this.refEvent = null;\n    this.receivedResp = null;\n    this.sent = false;\n    this.send();\n  }\n\n  send() {\n    if (this._hasReceived('timeout')) {\n      return;\n    }\n\n    this.startTimeout();\n    this.sent = true;\n    this.channel.socket.push({\n      topic: this.channel.topic,\n      event: this.event,\n      payload: this.payload,\n      ref: this.ref\n    });\n  }\n\n  updatePayload(payload) {\n    this.payload = Object.assign(Object.assign({}, this.payload), payload);\n  }\n\n  receive(status, callback) {\n    var _a;\n\n    if (this._hasReceived(status)) {\n      callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);\n    }\n\n    this.recHooks.push({\n      status,\n      callback\n    });\n    return this;\n  }\n\n  startTimeout() {\n    if (this.timeoutTimer) {\n      return;\n    }\n\n    this.ref = this.channel.socket.makeRef();\n    this.refEvent = this.channel.replyEventName(this.ref);\n    this.channel.on(this.refEvent, payload => {\n      this._cancelRefEvent();\n\n      this._cancelTimeout();\n\n      this.receivedResp = payload;\n\n      this._matchReceive(payload);\n    });\n    this.timeoutTimer = setTimeout(() => {\n      this.trigger('timeout', {});\n    }, this.timeout);\n  }\n\n  trigger(status, response) {\n    if (this.refEvent) this.channel.trigger(this.refEvent, {\n      status,\n      response\n    });\n  }\n\n  destroy() {\n    this._cancelRefEvent();\n\n    this._cancelTimeout();\n  }\n\n  _cancelRefEvent() {\n    if (!this.refEvent) {\n      return;\n    }\n\n    this.channel.off(this.refEvent);\n  }\n\n  _cancelTimeout() {\n    clearTimeout(this.timeoutTimer);\n    this.timeoutTimer = undefined;\n  }\n\n  _matchReceive(_ref) {\n    let {\n      status,\n      response\n    } = _ref;\n    this.recHooks.filter(h => h.status === status).forEach(h => h.callback(response));\n  }\n\n  _hasReceived(status) {\n    return this.receivedResp && this.receivedResp.status === status;\n  }\n\n}","map":{"version":3,"sources":["/Users/joshpatel/supa-react/node_modules/@supabase/realtime-js/src/lib/push.ts"],"names":[],"mappings":"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","sourcesContent":["import { DEFAULT_TIMEOUT } from '../lib/constants'\nimport RealtimeSubscription from '../RealtimeSubscription'\n\nexport default class Push {\n  sent: boolean = false\n  timeoutTimer: number | undefined = undefined\n  ref: string = ''\n  receivedResp: {\n    status: string\n    response: Function\n  } | null = null\n  recHooks: {\n    status: string\n    callback: Function\n  }[] = []\n  refEvent: string | null = null\n\n  /**\n   * Initializes the Push\n   *\n   * @param channel The Channel\n   * @param event The event, for example `\"phx_join\"`\n   * @param payload The payload, for example `{user_id: 123}`\n   * @param timeout The push timeout in milliseconds\n   */\n  constructor(\n    public channel: RealtimeSubscription,\n    public event: string,\n    public payload: { [key: string]: unknown } = {},\n    public timeout: number = DEFAULT_TIMEOUT\n  ) {}\n\n  resend(timeout: number) {\n    this.timeout = timeout\n    this._cancelRefEvent()\n    this.ref = ''\n    this.refEvent = null\n    this.receivedResp = null\n    this.sent = false\n    this.send()\n  }\n\n  send() {\n    if (this._hasReceived('timeout')) {\n      return\n    }\n    this.startTimeout()\n    this.sent = true\n    this.channel.socket.push({\n      topic: this.channel.topic,\n      event: this.event,\n      payload: this.payload,\n      ref: this.ref,\n    })\n  }\n\n  updatePayload(payload: { [key: string]: unknown }): void {\n    this.payload = { ...this.payload, ...payload }\n  }\n\n  receive(status: string, callback: Function) {\n    if (this._hasReceived(status)) {\n      callback(this.receivedResp?.response)\n    }\n\n    this.recHooks.push({ status, callback })\n    return this\n  }\n\n  startTimeout() {\n    if (this.timeoutTimer) {\n      return\n    }\n    this.ref = this.channel.socket.makeRef()\n    this.refEvent = this.channel.replyEventName(this.ref)\n\n    this.channel.on(this.refEvent, (payload: any) => {\n      this._cancelRefEvent()\n      this._cancelTimeout()\n      this.receivedResp = payload\n      this._matchReceive(payload)\n    })\n\n    this.timeoutTimer = <any>setTimeout(() => {\n      this.trigger('timeout', {})\n    }, this.timeout)\n  }\n\n  trigger(status: string, response: any) {\n    if (this.refEvent) this.channel.trigger(this.refEvent, { status, response })\n  }\n\n  destroy() {\n    this._cancelRefEvent()\n    this._cancelTimeout()\n  }\n\n  private _cancelRefEvent() {\n    if (!this.refEvent) {\n      return\n    }\n    this.channel.off(this.refEvent)\n  }\n\n  private _cancelTimeout() {\n    clearTimeout(this.timeoutTimer)\n    this.timeoutTimer = undefined\n  }\n\n  private _matchReceive({\n    status,\n    response,\n  }: {\n    status: string\n    response: Function\n  }) {\n    this.recHooks\n      .filter((h) => h.status === status)\n      .forEach((h) => h.callback(response))\n  }\n\n  private _hasReceived(status: string) {\n    return this.receivedResp && this.receivedResp.status === status\n  }\n}\n"]},"metadata":{},"sourceType":"module"}