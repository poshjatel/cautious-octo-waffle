{"ast":null,"code":"import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nexport default class RealtimeSubscription {\n  constructor(topic) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let socket = arguments.length > 2 ? arguments[2] : undefined;\n    this.topic = topic;\n    this.params = params;\n    this.socket = socket;\n    this.bindings = [];\n    this.state = CHANNEL_STATES.closed;\n    this.joinedOnce = false;\n    this.pushBuffer = [];\n    this.timeout = this.socket.timeout;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.rejoinTimer = new Timer(() => this.rejoinUntilConnected(), this.socket.reconnectAfterMs);\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined;\n      this.rejoinTimer.reset();\n      this.pushBuffer.forEach(pushEvent => pushEvent.send());\n      this.pushBuffer = [];\n    });\n    this.onClose(() => {\n      this.rejoinTimer.reset();\n      this.socket.log('channel', `close ${this.topic} ${this.joinRef()}`);\n      this.state = CHANNEL_STATES.closed;\n      this.socket.remove(this);\n    });\n    this.onError(reason => {\n      if (this.isLeaving() || this.isClosed()) {\n        return;\n      }\n\n      this.socket.log('channel', `error ${this.topic}`, reason);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('timeout', () => {\n      if (!this.isJoining()) {\n        return;\n      }\n\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.on(CHANNEL_EVENTS.reply, (payload, ref) => {\n      this.trigger(this.replyEventName(ref), payload);\n    });\n  }\n\n  rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout();\n\n    if (this.socket.isConnected()) {\n      this.rejoin();\n    }\n  }\n\n  subscribe() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n    } else {\n      this.joinedOnce = true;\n      this.rejoin(timeout);\n      return this.joinPush;\n    }\n  }\n\n  onClose(callback) {\n    this.on(CHANNEL_EVENTS.close, callback);\n  }\n\n  onError(callback) {\n    this.on(CHANNEL_EVENTS.error, reason => callback(reason));\n  }\n\n  on(event, callback) {\n    this.bindings.push({\n      event,\n      callback\n    });\n  }\n\n  off(event) {\n    this.bindings = this.bindings.filter(bind => bind.event !== event);\n  }\n\n  canPush() {\n    return this.socket.isConnected() && this.isJoined();\n  }\n\n  push(event, payload) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n    }\n\n    let pushEvent = new Push(this, event, payload, timeout);\n\n    if (this.canPush()) {\n      pushEvent.send();\n    } else {\n      pushEvent.startTimeout();\n      this.pushBuffer.push(pushEvent);\n    }\n\n    return pushEvent;\n  }\n\n  updateJoinPayload(payload) {\n    this.joinPush.updatePayload(payload);\n  }\n  /**\n   * Leaves the channel\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n\n\n  unsubscribe() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n    this.state = CHANNEL_STATES.leaving;\n\n    let onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`);\n      this.trigger(CHANNEL_EVENTS.close, 'leave', this.joinRef());\n    }; // Destroy joinPush to avoid connection timeouts during unscription phase\n\n\n    this.joinPush.destroy();\n    let leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n    leavePush.receive('ok', () => onClose()).receive('timeout', () => onClose());\n    leavePush.send();\n\n    if (!this.canPush()) {\n      leavePush.trigger('ok', {});\n    }\n\n    return leavePush;\n  }\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   */\n\n\n  onMessage(event, payload, ref) {\n    return payload;\n  }\n\n  isMember(topic) {\n    return this.topic === topic;\n  }\n\n  joinRef() {\n    return this.joinPush.ref;\n  }\n\n  sendJoin(timeout) {\n    this.state = CHANNEL_STATES.joining;\n    this.joinPush.resend(timeout);\n  }\n\n  rejoin() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n    if (this.isLeaving()) {\n      return;\n    }\n\n    this.sendJoin(timeout);\n  }\n\n  trigger(event, payload, ref) {\n    let {\n      close,\n      error,\n      leave,\n      join\n    } = CHANNEL_EVENTS;\n    let events = [close, error, leave, join];\n\n    if (ref && events.indexOf(event) >= 0 && ref !== this.joinRef()) {\n      return;\n    }\n\n    let handledPayload = this.onMessage(event, payload, ref);\n\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n    }\n\n    this.bindings.filter(bind => {\n      // Bind all events if the user specifies a wildcard.\n      if (bind.event === '*') {\n        return event === (payload === null || payload === void 0 ? void 0 : payload.type);\n      } else {\n        return bind.event === event;\n      }\n    }).map(bind => bind.callback(handledPayload, ref));\n  }\n\n  replyEventName(ref) {\n    return `chan_reply_${ref}`;\n  }\n\n  isClosed() {\n    return this.state === CHANNEL_STATES.closed;\n  }\n\n  isErrored() {\n    return this.state === CHANNEL_STATES.errored;\n  }\n\n  isJoined() {\n    return this.state === CHANNEL_STATES.joined;\n  }\n\n  isJoining() {\n    return this.state === CHANNEL_STATES.joining;\n  }\n\n  isLeaving() {\n    return this.state === CHANNEL_STATES.leaving;\n  }\n\n}","map":{"version":3,"sources":["/Users/joshpatel/supa-react/node_modules/@supabase/realtime-js/src/RealtimeSubscription.ts"],"names":[],"mappings":"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","sourcesContent":["import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants'\nimport Push from './lib/push'\nimport RealtimeClient from './RealtimeClient'\nimport Timer from './lib/timer'\n\nexport default class RealtimeSubscription {\n  bindings: any[] = []\n  timeout: number\n  state = CHANNEL_STATES.closed\n  joinedOnce = false\n  joinPush: Push\n  rejoinTimer: Timer\n  pushBuffer: Push[] = []\n\n  constructor(\n    public topic: string,\n    public params: { [key: string]: unknown } = {},\n    public socket: RealtimeClient\n  ) {\n    this.timeout = this.socket.timeout\n    this.joinPush = new Push(\n      this,\n      CHANNEL_EVENTS.join,\n      this.params,\n      this.timeout\n    )\n    this.rejoinTimer = new Timer(\n      () => this.rejoinUntilConnected(),\n      this.socket.reconnectAfterMs\n    )\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined\n      this.rejoinTimer.reset()\n      this.pushBuffer.forEach((pushEvent: Push) => pushEvent.send())\n      this.pushBuffer = []\n    })\n    this.onClose(() => {\n      this.rejoinTimer.reset()\n      this.socket.log('channel', `close ${this.topic} ${this.joinRef()}`)\n      this.state = CHANNEL_STATES.closed\n      this.socket.remove(this)\n    })\n    this.onError((reason: string) => {\n      if (this.isLeaving() || this.isClosed()) {\n        return\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.joinPush.receive('timeout', () => {\n      if (!this.isJoining()) {\n        return\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.on(CHANNEL_EVENTS.reply, (payload: any, ref: string) => {\n      this.trigger(this.replyEventName(ref), payload)\n    })\n  }\n\n  rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout()\n    if (this.socket.isConnected()) {\n      this.rejoin()\n    }\n  }\n\n  subscribe(timeout = this.timeout) {\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`\n    } else {\n      this.joinedOnce = true\n      this.rejoin(timeout)\n      return this.joinPush\n    }\n  }\n\n  onClose(callback: Function) {\n    this.on(CHANNEL_EVENTS.close, callback)\n  }\n\n  onError(callback: Function) {\n    this.on(CHANNEL_EVENTS.error, (reason: string) => callback(reason))\n  }\n\n  on(event: string, callback: Function) {\n    this.bindings.push({ event, callback })\n  }\n\n  off(event: string) {\n    this.bindings = this.bindings.filter((bind) => bind.event !== event)\n  }\n\n  canPush() {\n    return this.socket.isConnected() && this.isJoined()\n  }\n\n  push(event: CHANNEL_EVENTS, payload: any, timeout = this.timeout) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`\n    }\n    let pushEvent = new Push(this, event, payload, timeout)\n    if (this.canPush()) {\n      pushEvent.send()\n    } else {\n      pushEvent.startTimeout()\n      this.pushBuffer.push(pushEvent)\n    }\n\n    return pushEvent\n  }\n\n  updateJoinPayload(payload: { [key: string]: unknown }): void {\n    this.joinPush.updatePayload(payload)\n  }\n\n  /**\n   * Leaves the channel\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout) {\n    this.state = CHANNEL_STATES.leaving\n    let onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`)\n      this.trigger(CHANNEL_EVENTS.close, 'leave', this.joinRef())\n    }\n    // Destroy joinPush to avoid connection timeouts during unscription phase\n    this.joinPush.destroy()\n\n    let leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout)\n    leavePush.receive('ok', () => onClose()).receive('timeout', () => onClose())\n    leavePush.send()\n    if (!this.canPush()) {\n      leavePush.trigger('ok', {})\n    }\n\n    return leavePush\n  }\n\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   */\n  onMessage(event: string, payload: any, ref?: string) {\n    return payload\n  }\n\n  isMember(topic: string) {\n    return this.topic === topic\n  }\n\n  joinRef() {\n    return this.joinPush.ref\n  }\n\n  sendJoin(timeout: number) {\n    this.state = CHANNEL_STATES.joining\n    this.joinPush.resend(timeout)\n  }\n\n  rejoin(timeout = this.timeout) {\n    if (this.isLeaving()) {\n      return\n    }\n    this.sendJoin(timeout)\n  }\n\n  trigger(event: string, payload?: any, ref?: string) {\n    let { close, error, leave, join } = CHANNEL_EVENTS\n    let events: string[] = [close, error, leave, join]\n    if (ref && events.indexOf(event) >= 0 && ref !== this.joinRef()) {\n      return\n    }\n    let handledPayload = this.onMessage(event, payload, ref)\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified'\n    }\n\n    this.bindings\n      .filter((bind) => {\n        // Bind all events if the user specifies a wildcard.\n        if (bind.event === '*') {\n          return event === payload?.type\n        } else {\n          return bind.event === event\n        }\n      })\n      .map((bind) => bind.callback(handledPayload, ref))\n  }\n\n  replyEventName(ref: string) {\n    return `chan_reply_${ref}`\n  }\n\n  isClosed() {\n    return this.state === CHANNEL_STATES.closed\n  }\n  isErrored() {\n    return this.state === CHANNEL_STATES.errored\n  }\n  isJoined() {\n    return this.state === CHANNEL_STATES.joined\n  }\n  isJoining() {\n    return this.state === CHANNEL_STATES.joining\n  }\n  isLeaving() {\n    return this.state === CHANNEL_STATES.leaving\n  }\n}\n"]},"metadata":{},"sourceType":"module"}