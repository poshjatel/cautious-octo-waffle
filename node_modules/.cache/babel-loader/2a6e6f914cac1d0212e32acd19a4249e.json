{"ast":null,"code":"/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  constructor(callback, timerCalc) {\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n    this.timer = undefined;\n    this.tries = 0;\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n  }\n\n  reset() {\n    this.tries = 0;\n    clearTimeout(this.timer);\n  } // Cancels any previous scheduleTimeout and schedules callback\n\n\n  scheduleTimeout() {\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      this.tries = this.tries + 1;\n      this.callback();\n    }, this.timerCalc(this.tries + 1));\n  }\n\n}","map":{"version":3,"sources":["/Users/joshpatel/supa-react/node_modules/@supabase/realtime-js/src/lib/timer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAWG;AACH,eAAc,MAAO,KAAP,CAAY;AAIxB,EAAA,WAAA,CAAmB,QAAnB,EAA8C,SAA9C,EAAiE;AAA9C,SAAA,QAAA,GAAA,QAAA;AAA2B,SAAA,SAAA,GAAA,SAAA;AAH9C,SAAA,KAAA,GAA4B,SAA5B;AACA,SAAA,KAAA,GAAgB,CAAhB;AAGE,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,SAAL,GAAiB,SAAjB;AACD;;AAED,EAAA,KAAK,GAAA;AACH,SAAK,KAAL,GAAa,CAAb;AACA,IAAA,YAAY,CAAC,KAAK,KAAN,CAAZ;AACD,GAZuB,CAcxB;;;AACA,EAAA,eAAe,GAAA;AACb,IAAA,YAAY,CAAC,KAAK,KAAN,CAAZ;AAEA,SAAK,KAAL,GAAkB,UAAU,CAAC,MAAK;AAChC,WAAK,KAAL,GAAa,KAAK,KAAL,GAAa,CAA1B;AACA,WAAK,QAAL;AACD,KAH2B,EAGzB,KAAK,SAAL,CAAe,KAAK,KAAL,GAAa,CAA5B,CAHyB,CAA5B;AAID;;AAtBuB","sourcesContent":["/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  timer: number | undefined = undefined\n  tries: number = 0\n\n  constructor(public callback: Function, public timerCalc: Function) {\n    this.callback = callback\n    this.timerCalc = timerCalc\n  }\n\n  reset() {\n    this.tries = 0\n    clearTimeout(this.timer)\n  }\n\n  // Cancels any previous scheduleTimeout and schedules callback\n  scheduleTimeout() {\n    clearTimeout(this.timer)\n\n    this.timer = <any>setTimeout(() => {\n      this.tries = this.tries + 1\n      this.callback()\n    }, this.timerCalc(this.tries + 1))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}