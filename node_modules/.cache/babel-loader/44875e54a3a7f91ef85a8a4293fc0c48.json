{"ast":null,"code":"import { PostgrestBuilder } from './types';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestRpcBuilder extends PostgrestBuilder {\n  constructor(url) {\n    let {\n      headers = {},\n      schema,\n      fetch\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super({\n      fetch\n    });\n    this.url = new URL(url);\n    this.headers = Object.assign({}, headers);\n    this.schema = schema;\n  }\n  /**\n   * Perform a function call.\n   */\n\n\n  rpc(params) {\n    let {\n      head = false,\n      count = null\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (head) {\n      this.method = 'HEAD';\n\n      if (params) {\n        Object.entries(params).forEach(_ref => {\n          let [name, value] = _ref;\n          this.url.searchParams.append(name, value);\n        });\n      }\n    } else {\n      this.method = 'POST';\n      this.body = params;\n    }\n\n    if (count) {\n      if (this.headers['Prefer'] !== undefined) this.headers['Prefer'] += `,count=${count}`;else this.headers['Prefer'] = `count=${count}`;\n    }\n\n    return new PostgrestFilterBuilder(this);\n  }\n\n}","map":{"version":3,"sources":["/Users/joshpatel/supa-react/node_modules/@supabase/postgrest-js/src/lib/PostgrestRpcBuilder.ts"],"names":[],"mappings":"AAAA,SAAgB,gBAAhB,QAAwC,SAAxC;AACA,OAAO,sBAAP,MAAmC,0BAAnC;AAEA,eAAc,MAAO,mBAAP,SAAsC,gBAAtC,CAAyD;AACrE,EAAA,WAAA,CACE,GADF,EAMiF;AAAA,QAJ/E;AACE,MAAA,OAAO,GAAG,EADZ;AAEE,MAAA,MAFF;AAGE,MAAA;AAHF,KAI+E,uEAAF,EAAE;AAE/E,UAAO;AAAE,MAAA;AAAF,KAAP;AACA,SAAK,GAAL,GAAW,IAAI,GAAJ,CAAQ,GAAR,CAAX;AACA,SAAK,OAAL,GAAY,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,OAAR,CAAZ;AACA,SAAK,MAAL,GAAc,MAAd;AACD;AAED;;AAEG;;;AACH,EAAA,GAAG,CACD,MADC,EAQK;AAAA,QANN;AACE,MAAA,IAAI,GAAG,KADT;AAEE,MAAA,KAAK,GAAG;AAFV,KAMM,uEAAF,EAAE;;AAEN,QAAI,IAAJ,EAAU;AACR,WAAK,MAAL,GAAc,MAAd;;AAEA,UAAI,MAAJ,EAAY;AACV,QAAA,MAAM,CAAC,OAAP,CAAe,MAAf,EAAuB,OAAvB,CAA+B,QAAkB;AAAA,cAAjB,CAAC,IAAD,EAAO,KAAP,CAAiB;AAC/C,eAAK,GAAL,CAAS,YAAT,CAAsB,MAAtB,CAA6B,IAA7B,EAAmC,KAAnC;AACD,SAFD;AAGD;AACF,KARD,MAQO;AACL,WAAK,MAAL,GAAc,MAAd;AACA,WAAK,IAAL,GAAY,MAAZ;AACD;;AAED,QAAI,KAAJ,EAAW;AACT,UAAI,KAAK,OAAL,CAAa,QAAb,MAA2B,SAA/B,EAA0C,KAAK,OAAL,CAAa,QAAb,KAA0B,UAAU,KAAK,EAAzC,CAA1C,KACK,KAAK,OAAL,CAAa,QAAb,IAAyB,SAAS,KAAK,EAAvC;AACN;;AAED,WAAO,IAAI,sBAAJ,CAA2B,IAA3B,CAAP;AACD;;AA/CoE","sourcesContent":["import { Fetch, PostgrestBuilder } from './types'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\n\nexport default class PostgrestRpcBuilder<T> extends PostgrestBuilder<T> {\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: { headers?: { [key: string]: string }; schema?: string; fetch?: Fetch } = {}\n  ) {\n    super(({ fetch } as unknown) as PostgrestBuilder<T>)\n    this.url = new URL(url)\n    this.headers = { ...headers }\n    this.schema = schema\n  }\n\n  /**\n   * Perform a function call.\n   */\n  rpc(\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    if (head) {\n      this.method = 'HEAD'\n\n      if (params) {\n        Object.entries(params).forEach(([name, value]) => {\n          this.url.searchParams.append(name, value)\n        })\n      }\n    } else {\n      this.method = 'POST'\n      this.body = params\n    }\n\n    if (count) {\n      if (this.headers['Prefer'] !== undefined) this.headers['Prefer'] += `,count=${count}`\n      else this.headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder(this)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}